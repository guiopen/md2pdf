---
import Layout from "@src/Layout.astro"
import * as content from "@src/content.json"
---

<Layout>
	<div class="page">
		<div class="editorPreviewContainer">
			<textarea
				id="editor"
				class="editorBox"
				placeholder={content.about}
				spellcheck={false}
			></textarea>
			<div
				id="preview"
				class="previewBox"
			>
			</div>
		</div>
		<button
			id="printButton"
			class="printButton"
		>
			<p class="printButtonText">Save</p>
		</button>
	</div>
</Layout>

<script>
	import {marked} from "marked"
	import DOMPurify from 'dompurify';

	const editor = document.getElementById("editor") as HTMLTextAreaElement
	const preview = document.getElementById("preview") as HTMLDivElement
	const printButton = document.getElementById("printButton") as HTMLButtonElement

	let isScrolling = false

	function syncScroll(scrolledElement: HTMLElement, targetElement: HTMLElement) {
		// Programmatic scroll event. Release the lock and do nothing.
		if (isScrolling) {
			isScrolling = false
			return
		}

		// User-initiated scroll event. Acquire lock and sync the other pane.
		if (scrolledElement && targetElement) {
			isScrolling = true
			const scrollableHeight = scrolledElement.scrollHeight - scrolledElement.clientHeight
			const targetScrollableHeight = targetElement.scrollHeight - targetElement.clientHeight

			// Avoid division by zero if not scrollable
			if (scrollableHeight === 0) {
				isScrolling = false // Release lock if there's nothing to scroll
				return
			}

			const scrollFactor = scrolledElement.scrollTop / scrollableHeight
			targetElement.scrollTop = scrollFactor * targetScrollableHeight
		}
	}

	function updatePreview() {
		if (editor && preview) {
			preview.innerHTML = DOMPurify.sanitize(marked.parse(editor.value, {
				async: false,
			})) as string
		}
	}

	// Initial render
	updatePreview()

	// Add event listeners
	editor.addEventListener("input", updatePreview)
	editor.addEventListener("scroll", () => syncScroll(editor, preview))
	preview.addEventListener("scroll", () => syncScroll(preview, editor))
	printButton.addEventListener("click", () => window.print())
</script>

<style>
	.page {
		display: flex;
		flex-direction: column;
		width: 100%;
		height: 100%;
		justify-content: center;
		align-items: center;
		padding: 15px;
		background-color: var(--main-background);
	}

	.editorPreviewContainer {
		display: flex;
		flex-direction: row;
		height: 100%;
		width: 100%;
		gap: 15px;
	}

	.editorBox {
		font-family: sans-serif;
		flex: 1;
		background-color: var(--box-background);
		color: var(--text-color);
		font-size: 15px;
		padding: 8px;
		resize: none;
		border-width: 0px;
		overflow-y: auto;
		overflow-x: hidden;
	}

	.editorBox:focus {
		outline-style: none;
	}

	.previewBox {
		font-family: sans-serif;
		flex: 1;
		background-color: var(--box-background);
		color: var(--text-color);
		font-size: 15px;
		padding: 8px;
		word-break: break-all;
		overflow-y: auto;
		overflow-x: hidden;
	}

	.previewBox :global(> :first-child) {
		margin-top: 0;
	}

	.previewBox :global(> :last-child) {
		margin-bottom: 0;
	}

	.printButton {
		width: 60px;
		height: 35px;
		background-color: var(--button-color);
		border: none;
		cursor: pointer;
		position: fixed;
		bottom: 30px;
		right: 30px;
		z-index: 999;
	}

	.printButtonText {
		font-size: 16px;
		margin: 0;
		color: var(--text-color);
	}

	@media print {
		.page {
			display: block;
			background-color: white;
			height: auto;
			padding: 0;
		}
		.editorPreviewContainer {
			display: block;
			height: auto;
		}
		.previewBox {
			display: block;
			background-color: white;
			color: black;
			overflow: visible;
			height: auto;
			flex: none;
		}
		.editorBox,
		.printButton {
			display: none;
		}
	}
</style>
